{"version":3,"file":"static/js/976.6f6d9f06.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.js","components/pages/Register.js","../node_modules/@chakra-ui/button/dist/index.esm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"button\":\"RegisterForm_button__B3hFq\"};","import { useDispatch } from 'react-redux';\nimport React from 'react';\nimport { register } from 'redux/auth/operations';\nimport { Input, InputRightElement, InputGroup, Button } from '@chakra-ui/react';\nimport { ViewOffIcon, ViewIcon } from '@chakra-ui/icons';\nimport css from './RegisterForm.module.css';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [show, setShow] = React.useState(false);\n  const handleClick = () => setShow(!show);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n\n    form.reset();\n  };\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n        <label className={css.label}>\n          Username\n          <Input\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Denys Stasiuk\"\n            required\n            borderColor=\"gray.500\"\n            bg={'white'}\n          />\n        </label>\n        <label className={css.label}>\n          Email\n          <Input\n            className={css.input}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"example@mail.com\"\n            required\n            borderColor=\"gray.500\"\n            bg={'white'}\n          />\n        </label>\n        <label className={css.label}>\n          Password\n          <InputGroup size=\"md\">\n            <Input\n              className={css.input}\n              type={show ? 'text' : 'password'}\n              name=\"password\"\n              placeholder=\"Enter your password\"\n              required\n              borderColor=\"gray.500\"\n              bg={'white'}\n            />\n            <InputRightElement width=\"65px\" mt={'5px'}>\n              <Button\n                h=\"30px\"\n                size=\"md\"\n                bg={'transperant'}\n                _hover={{ bg: 'transperant' }}\n                _active={{ bg: 'transperant' }}\n                onClick={handleClick}\n              >\n                {show ? (\n                  <ViewOffIcon color=\"gray.500\" />\n                ) : (\n                  <ViewIcon color=\"gray.500\" />\n                )}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </label>\n        <div\n          style={{\n            display: 'flex',\n          }}\n        >\n          <button className={css.button} type=\"submit\">\n            Register\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { Helmet } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n","// ../../../react-shim.js\nimport React from \"react\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra as chakra3,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\nvar dataAttr = (condition) => condition ? \"\" : void 0;\n\n// src/button.tsx\nimport { useMemo as useMemo2 } from \"react\";\n\n// src/button-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\n\n// src/button-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nfunction ButtonIcon(props) {\n  const { children, className, ...rest } = props;\n  const _children = isValidElement(children) ? cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n  const _className = cx(\"chakra-button__icon\", className);\n  return /* @__PURE__ */ React.createElement(chakra.span, {\n    display: \"inline-flex\",\n    alignSelf: \"center\",\n    flexShrink: 0,\n    ...rest,\n    className: _className\n  }, _children);\n}\nButtonIcon.displayName = \"ButtonIcon\";\n\n// src/button-spinner.tsx\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction ButtonSpinner(props) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = /* @__PURE__ */ React.createElement(Spinner, {\n      color: \"currentColor\",\n      width: \"1em\",\n      height: \"1em\"\n    }),\n    className,\n    __css,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__spinner\", className);\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  const spinnerStyles = useMemo(() => ({\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? spacing : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\",\n    ...__css\n  }), [__css, label, marginProp, spacing]);\n  return /* @__PURE__ */ React.createElement(chakra2.div, {\n    className: _className,\n    ...rest,\n    __css: spinnerStyles\n  }, children);\n}\nButtonSpinner.displayName = \"ButtonSpinner\";\n\n// src/use-button-type.tsx\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\n// src/button.tsx\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group, ...props });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo2(() => {\n    const _focus = { ...styles == null ? void 0 : styles[\"_focus\"], zIndex: 1 };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...!!group && { _focus }\n    };\n  }, [styles, group]);\n  const { ref: _ref, type: defaultType } = useButtonType(as);\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children };\n  return /* @__PURE__ */ React.createElement(chakra3.button, {\n    disabled: isDisabled || isLoading,\n    ref: useMergeRefs(ref, _ref),\n    as,\n    type: type ?? defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className),\n    ...rest\n  }, isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */ React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--start\",\n    label: loadingText,\n    placement: \"start\",\n    spacing: iconSpacing\n  }, spinner), isLoading ? loadingText || /* @__PURE__ */ React.createElement(chakra3.span, {\n    opacity: 0\n  }, /* @__PURE__ */ React.createElement(ButtonContent, {\n    ...contentProps\n  })) : /* @__PURE__ */ React.createElement(ButtonContent, {\n    ...contentProps\n  }), isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */ React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--end\",\n    label: loadingText,\n    placement: \"end\",\n    spacing: iconSpacing\n  }, spinner));\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props;\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, leftIcon && /* @__PURE__ */ React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), children, rightIcon && /* @__PURE__ */ React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n}\n\n// src/button-group.tsx\nimport {\n  chakra as chakra4,\n  forwardRef as forwardRef2\n} from \"@chakra-ui/system\";\nimport { useMemo as useMemo3 } from \"react\";\nvar attachedStyles = {\n  horizontal: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 }\n  },\n  vertical: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderBottomRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderTopRadius: 0 }\n  }\n};\nvar gapStyles = {\n  horizontal: (spacing) => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing }\n  }),\n  vertical: (spacing) => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginTop: spacing }\n  })\n};\nvar ButtonGroup = forwardRef2(function ButtonGroup2(props, ref) {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    orientation = \"horizontal\",\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__group\", className);\n  const context = useMemo3(() => ({ size, colorScheme, variant, isDisabled }), [size, colorScheme, variant, isDisabled]);\n  let groupStyles = {\n    display: \"inline-flex\",\n    ...isAttached ? attachedStyles[orientation] : gapStyles[orientation](spacing)\n  };\n  const isVertical = orientation === \"vertical\";\n  return /* @__PURE__ */ React.createElement(ButtonGroupProvider, {\n    value: context\n  }, /* @__PURE__ */ React.createElement(chakra4.div, {\n    ref,\n    role: \"group\",\n    __css: groupStyles,\n    className: _className,\n    \"data-attached\": isAttached ? \"\" : void 0,\n    \"data-orientation\": orientation,\n    flexDir: isVertical ? \"column\" : void 0,\n    ...rest\n  }));\n});\nButtonGroup.displayName = \"ButtonGroup\";\n\n// src/icon-button.tsx\nimport { forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nimport { cloneElement as cloneElement2, isValidElement as isValidElement2 } from \"react\";\nvar IconButton = forwardRef3((props, ref) => {\n  const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props;\n  const element = icon || children;\n  const _children = isValidElement2(element) ? cloneElement2(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n  return /* @__PURE__ */ React.createElement(Button, {\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : void 0,\n    ref,\n    \"aria-label\": ariaLabel,\n    ...rest\n  }, _children);\n});\nIconButton.displayName = \"IconButton\";\nexport {\n  Button,\n  ButtonGroup,\n  ButtonSpinner,\n  IconButton,\n  useButtonGroup\n};\n"],"names":["RegisterForm","dispatch","useDispatch","React","show","setShow","style","textAlign","className","css","onSubmit","event","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","autoComplete","type","placeholder","required","borderColor","bg","size","width","mt","h","_hover","_active","onClick","color","display","Register","cx","classNames","filter","Boolean","join","dataAttr","condition","createContext","strict","ButtonGroupProvider","useButtonGroup","ButtonIcon","props","children","rest","_children","isValidElement","cloneElement","focusable","_className","chakra","alignSelf","flexShrink","ButtonSpinner","label","placement","spacing","Spinner","height","__css","marginProp","spinnerStyles","useMemo","alignItems","position","chakra2","displayName","Button","forwardRef","ref","group","styles","useStyleConfig","omitThemingProps","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","spinner","spinnerPlacement","as","buttonStyles","useMemo2","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useState","isButton","setIsButton","useCallback","node","tagName","useButtonType","_ref","defaultType","contentProps","chakra3","disabled","useMergeRefs","opacity","ButtonContent","marginEnd","marginStart","attachedStyles","horizontal","borderEndRadius","borderRadius","borderStartRadius","vertical","borderBottomRadius","borderTopRadius","gapStyles","marginTop","forwardRef2","colorScheme","variant","isAttached","orientation","context","useMemo3","groupStyles","isVertical","chakra4","role","flexDir","forwardRef3","icon","isRound","ariaLabel","element","isValidElement2","cloneElement2","padding"],"sourceRoot":""}